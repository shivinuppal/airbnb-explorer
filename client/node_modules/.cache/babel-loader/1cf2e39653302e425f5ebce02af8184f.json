{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asmz0\\\\Documents\\\\GitHub\\\\airbnb-explorer\\\\client\\\\src\\\\components\\\\SearchBox.js\";\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus\");\nGeocode.enableDebug();\n\nclass SearchBoxMap extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {};\n\n    this.onPlaceSelected = place => {\n      const address = place.formatted_address,\n\n      /* addressArray =  place.address_components,\r\n       city = this.getCity( addressArray ),\r\n       area = this.getArea( addressArray ),\r\n       state = this.getState( addressArray ),*/\n      latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        /* address: ( address ) ? address : '',\r\n         area: ( area ) ? area : '',\r\n         city: ( city ) ? city : '',\r\n         state: ( state ) ? state : '',*/\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.onMarkerDragEnd = event => {\n      console.log('event', event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components; //,\n\n        /* city = this.getCity( addressArray ),\r\n         area = this.getArea( addressArray ),\r\n         state = this.getState( addressArray );*/\n\n        this.setState({\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      address: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\r\n    * Get the current address from the default map position and set those values in the state\r\n    */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address; //,\n\n      /*  addressArray =  response.results[0].address_components,\r\n        city = this.getCity( addressArray ),\r\n        area = this.getArea( addressArray ),\r\n        state = this.getState( addressArray );\r\n      \n       console.log( 'city', city, area, state );\r\n      */\n\n      this.setState({\n        address: address ? address : ''\n        /*  area: ( area ) ? area : '',\r\n          city: ( city ) ? city : '',\r\n          state: ( state ) ? state : '',*/\n\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  /**\r\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n    *\r\n    * @param nextProps\r\n    * @param nextState\r\n    * @return {boolean}\r\n    */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address //||\n\n    /*this.state.city !== nextState.city ||\r\n    this.state.area !== nextState.area ||\r\n    this.state.state !== nextState.state*/\n    ) {\n        return true;\n      } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\r\n    * Get the city and set the city input value to the one selected\r\n    *\r\n    * @param addressArray\r\n    * @return {string}\r\n    \r\n   getCity = ( addressArray ) => {\r\n    let city = '';\r\n    for( let i = 0; i < addressArray.length; i++ ) {\r\n     if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\r\n      city = addressArray[ i ].long_name;\r\n      return city;\r\n     }\r\n    }\r\n   };\r\n  /**\r\n    * Get the area and set the area input value to the one selected\r\n    *\r\n    * @param addressArray\r\n    * @return {string}\r\n    \r\n   getArea = ( addressArray ) => {\r\n    let area = '';\r\n    for( let i = 0; i < addressArray.length; i++ ) {\r\n     if ( addressArray[ i ].types[0]  ) {\r\n      for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\r\n       if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\r\n        area = addressArray[ i ].long_name;\r\n        return area;\r\n       }\r\n      }\r\n     }\r\n    }\r\n   };\r\n  /**\r\n    * Get the address and set the address input value to the one selected\r\n    *\r\n    * @param addressArray\r\n    * @return {string}\r\n    \r\n   getState = ( addressArray ) => {\r\n    let state = '';\r\n    for( let i = 0; i < addressArray.length; i++ ) {\r\n     for( let i = 0; i < addressArray.length; i++ ) {\r\n      if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\r\n       state = addressArray[ i ].long_name;\r\n       return state;\r\n      }\r\n     }\r\n    }\r\n   };*/\n\n  /**\r\n    * And function for city,state and address input\r\n    * @param event\r\n    */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => /*#__PURE__*/React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      }\n    }, /*#__PURE__*/React.createElement(Autocomplete, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottom: '100px'\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: [],\n      componentRestrictions: {\n        country: \"us\"\n      },\n      bounds: [{\n        lat: 45,\n        lng: -124\n      }, {\n        lat: 49,\n        lng: -120\n      }]\n    }), /*#__PURE__*/React.createElement(Marker, {\n      google: this.props.google,\n      name: 'Dolores park',\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      }\n    }), /*#__PURE__*/React.createElement(Marker, null), /*#__PURE__*/React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0\n      }\n    }, this.state.address))))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus&libraries=places\",\n        loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          }\n        }),\n        containerElement: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          }\n        }),\n        mapElement: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          }\n        })\n      }));\n    } else {\n      map = /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        }\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default SearchBoxMap; //  export default GoogleApiWrapper({\n//\tapiKey: 'AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus'\n//})(MapContainer);\n\n/*<div>\r\n    <div className=\"form-group\">\r\n     <label htmlFor=\"\">City</label>\r\n     <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\r\n    </div>\r\n    <div className=\"form-group\">\r\n     <label htmlFor=\"\">Area</label>\r\n     <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\r\n    </div>\r\n    <div className=\"form-group\">\r\n     <label htmlFor=\"\">State</label>\r\n     <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\r\n    </div>\r\n    <div className=\"form-group\">\r\n     <label htmlFor=\"\">Address</label>\r\n     <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\r\n    </div>\r\n   </div>*/","map":{"version":3,"sources":["C:/Users/asmz0/Documents/GitHub/airbnb-explorer/client/src/components/SearchBox.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","enableDebug","SearchBoxMap","Component","constructor","props","onChange","event","setState","target","name","value","onInfoWindowClose","onPlaceSelected","place","address","formatted_address","latValue","geometry","location","lat","lngValue","lng","markerPosition","mapPosition","onMarkerDragEnd","console","log","newLat","latLng","newLng","addressArray","fromLatLng","then","response","results","address_components","error","state","center","componentDidMount","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottom","country","padding","margin","map","undefined"],"mappings":"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","sourcesContent":["\r\n\r\n\r\nimport React from 'react'\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport Geocode from \"react-geocode\";\r\nGeocode.setApiKey(\"AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus\");\r\nGeocode.enableDebug();\r\nclass SearchBoxMap extends React.Component{\r\nconstructor( props ){\r\n  super( props );\r\n  this.state = {\r\n    address: '',\r\n   mapPosition: {\r\n    lat: this.props.center.lat,\r\n    lng: this.props.center.lng\r\n   },\r\n   markerPosition: {\r\n    lat: this.props.center.lat,\r\n    lng: this.props.center.lng\r\n}\r\n  }\r\n }\r\n/**\r\n  * Get the current address from the default map position and set those values in the state\r\n  */\r\n componentDidMount() {\r\n  Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\r\n   response => {\r\n    const address = response.results[0].formatted_address;//,\r\n   /*  addressArray =  response.results[0].address_components,\r\n     city = this.getCity( addressArray ),\r\n     area = this.getArea( addressArray ),\r\n     state = this.getState( addressArray );\r\n  \r\n    console.log( 'city', city, area, state );\r\n  */\r\n    this.setState( {\r\n     address: ( address ) ? address : '',\r\n   /*  area: ( area ) ? area : '',\r\n     city: ( city ) ? city : '',\r\n     state: ( state ) ? state : '',*/\r\n    } )\r\n   },\r\n   error => {\r\n    console.error(error);\r\n   }\r\n  );\r\n };\r\n/**\r\n  * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n  *\r\n  * @param nextProps\r\n  * @param nextState\r\n  * @return {boolean}\r\n  */\r\n shouldComponentUpdate( nextProps, nextState ){\r\n  if (\r\n   this.state.markerPosition.lat !== this.props.center.lat ||\r\n   this.state.address !== nextState.address //||\r\n   /*this.state.city !== nextState.city ||\r\n   this.state.area !== nextState.area ||\r\n   this.state.state !== nextState.state*/\r\n  ) {\r\n   return true\r\n  } else if ( this.props.center.lat === nextProps.center.lat ){\r\n   return false\r\n  }\r\n }\r\n/**\r\n  * Get the city and set the city input value to the one selected\r\n  *\r\n  * @param addressArray\r\n  * @return {string}\r\n  \r\n getCity = ( addressArray ) => {\r\n  let city = '';\r\n  for( let i = 0; i < addressArray.length; i++ ) {\r\n   if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\r\n    city = addressArray[ i ].long_name;\r\n    return city;\r\n   }\r\n  }\r\n };\r\n/**\r\n  * Get the area and set the area input value to the one selected\r\n  *\r\n  * @param addressArray\r\n  * @return {string}\r\n  \r\n getArea = ( addressArray ) => {\r\n  let area = '';\r\n  for( let i = 0; i < addressArray.length; i++ ) {\r\n   if ( addressArray[ i ].types[0]  ) {\r\n    for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\r\n     if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\r\n      area = addressArray[ i ].long_name;\r\n      return area;\r\n     }\r\n    }\r\n   }\r\n  }\r\n };\r\n/**\r\n  * Get the address and set the address input value to the one selected\r\n  *\r\n  * @param addressArray\r\n  * @return {string}\r\n  \r\n getState = ( addressArray ) => {\r\n  let state = '';\r\n  for( let i = 0; i < addressArray.length; i++ ) {\r\n   for( let i = 0; i < addressArray.length; i++ ) {\r\n    if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\r\n     state = addressArray[ i ].long_name;\r\n     return state;\r\n    }\r\n   }\r\n  }\r\n };*/\r\n/**\r\n  * And function for city,state and address input\r\n  * @param event\r\n  */\r\n onChange = ( event ) => {\r\n  this.setState({ [event.target.name]: event.target.value });\r\n };\r\n/**\r\n  * This Event triggers when the marker window is closed\r\n  *\r\n  * @param event\r\n  */\r\n onInfoWindowClose = ( event ) => {\r\n};\r\n/**\r\n  * When the user types an address in the search box\r\n  * @param place\r\n  */\r\n onPlaceSelected = ( place ) => {\r\nconst address = place.formatted_address,\r\n  /* addressArray =  place.address_components,\r\n   city = this.getCity( addressArray ),\r\n   area = this.getArea( addressArray ),\r\n   state = this.getState( addressArray ),*/\r\n   latValue = place.geometry.location.lat(),\r\n   lngValue = place.geometry.location.lng();\r\n// Set these values in the state.\r\n  this.setState({\r\n  /* address: ( address ) ? address : '',\r\n   area: ( area ) ? area : '',\r\n   city: ( city ) ? city : '',\r\n   state: ( state ) ? state : '',*/\r\n   markerPosition: {\r\n    lat: latValue,\r\n    lng: lngValue\r\n   },\r\n   mapPosition: {\r\n    lat: latValue,\r\n    lng: lngValue\r\n   },\r\n  })\r\n };\r\n/**\r\n  * When the marker is dragged you get the lat and long using the functions available from event object.\r\n  * Use geocode to get the address, city, area and state from the lat and lng positions.\r\n  * And then set those values in the state.\r\n  *\r\n  * @param event\r\n  */\r\n onMarkerDragEnd = ( event ) => {\r\n  console.log( 'event', event );\r\n  let newLat = event.latLng.lat(),\r\n   newLng = event.latLng.lng(),\r\n   addressArray = [];\r\nGeocode.fromLatLng( newLat , newLng ).then(\r\n   response => {\r\n    const address = response.results[0].formatted_address,\r\n     addressArray =  response.results[0].address_components;//,\r\n    /* city = this.getCity( addressArray ),\r\n     area = this.getArea( addressArray ),\r\n     state = this.getState( addressArray );*/\r\nthis.setState( {\r\n     \r\n     markerPosition: {\r\n      lat: newLat,\r\n      lng: newLng\r\n     },\r\n     mapPosition: {\r\n      lat: newLat,\r\n      lng: newLng\r\n     },\r\n    } )\r\n   },\r\n   error => {\r\n    console.error(error);\r\n   }\r\n  );\r\n };\r\nrender(){\r\nconst AsyncMap = withScriptjs(\r\n   withGoogleMap(\r\n    props => (\r\n     <GoogleMap google={this.props.google}\r\n      defaultZoom={this.props.zoom}\r\n      defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n     >\r\n      {/* For Auto complete Search Box */}\r\n      <Autocomplete\r\n       style={{\r\n        width: '100%',\r\n        height: '40px',\r\n        paddingLeft: '16px',\r\n        marginTop: '2px',\r\n        marginBottom: '100px'\r\n       }}\r\n       onPlaceSelected={ this.onPlaceSelected }\r\n       types={[]}\r\n       componentRestrictions={{country: \"us\"}}\r\n       bounds={[{lat: 45, lng: -124},{lat:49, lng: -120}]}\r\n      />\r\n{/*Marker*/}\r\n      <Marker google={this.props.google}\r\n       name={'Dolores park'}\r\n          draggable={true}\r\n          onDragEnd={ this.onMarkerDragEnd }\r\n             position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n      />\r\n      <Marker />\r\n{/* InfoWindow on top of marker */}\r\n      <InfoWindow\r\n       onClose={this.onInfoWindowClose}\r\n       position={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}\r\n      >\r\n       <div>\r\n        <span style={{ padding: 0, margin: 0 }}>{ this.state.address }</span>\r\n       </div>\r\n      </InfoWindow>\r\n</GoogleMap>\r\n)\r\n   )\r\n  );\r\nlet map;\r\n  if( this.props.center.lat !== undefined ) {\r\n   map = <div>\r\n     \r\n     <AsyncMap\r\n      googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus&libraries=places\"\r\n      loadingElement={\r\n       <div style={{ height: `100%` }} />\r\n      }\r\n      containerElement={\r\n       <div style={{ height: this.props.height }} />\r\n      }\r\n      mapElement={\r\n       <div style={{ height: `100%` }} />\r\n      }\r\n     />\r\n    </div>\r\n} else {\r\n   map = <div style={{height: this.props.height}} />\r\n  }\r\n  return( map )\r\n }\r\n}\r\nexport default SearchBoxMap\r\n//  export default GoogleApiWrapper({\r\n//\tapiKey: 'AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus'\r\n  //})(MapContainer);\r\n  /*<div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">City</label>\r\n       <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">Area</label>\r\n       <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">State</label>\r\n       <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">Address</label>\r\n       <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\r\n      </div>\r\n     </div>*/"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/mirriamronoh/Documents/GitHub/airbnb-explorer/client/src/components/Analytics.js\";\nimport React from 'react';\nimport '../style/Dashboard.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PageNavbar from './PageNavbar';\nimport GenreButton from './GenreButton';\nimport DashboardMovieRow from './DashboardMovieRow';\nexport default class Analytics extends React.Component {\n  constructor(props) {\n    super(props); // The state maintained by this React Component. This component maintains the list of genres,\n    // and a list of movies for a specified genre.\n\n    this.state = {\n      genres: [],\n      movies: []\n    };\n    this.showMovies = this.showMovies.bind(this);\n  } // React function that is called when the page load.\n\n\n  componentDidMount() {\n    // Send an HTTP request to the server.\n    fetch(\"http://localhost:8081/genres\", {\n      method: 'GET' // The type of HTTP request.\n\n    }).then(res => res.json()) // Convert the response data to a JSON.\n    .then(genreList => {\n      if (!genreList) return; // Map each genreObj in genreList to an HTML element:\n      // A button which triggers the showMovies function for each genre.\n\n      let genreDivs = genreList.map((genreObj, i) => /*#__PURE__*/React.createElement(GenreButton, {\n        key: i,\n        id: \"button-\" + genreObj.genre,\n        onClick: () => this.showMovies(genreObj.genre),\n        genre: genreObj.genre\n      })); // Set the state of the genres list to the value returned by the HTTP response from the server.\n\n      this.setState({\n        genres: genreDivs\n      });\n    }).catch(err => console.log(err)); // Print the error if there is one.\n  }\n  /* ---- Q1b (Dashboard) ---- */\n\n  /* Set this.state.movies to a list of <DashboardMovieRow />'s. */\n\n\n  showMovies(genre) {\n    console.log(genre);\n    fetch(\"http://localhost:8081/genres/\" + genre, {\n      method: \"GET\"\n    }).then(res => res.json()).then(movieList => {\n      console.log(movieList);\n      let movieDivs = movieList.map((movie, i) => /*#__PURE__*/React.createElement(DashboardMovieRow, {\n        key: i,\n        title: movie.title,\n        rating: movie.rating,\n        votes: movie.vote_count\n      }));\n      this.setState({\n        movies: movieDivs\n      });\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Analytics\"\n    }, /*#__PURE__*/React.createElement(PageNavbar, {\n      active: \"analytics\"\n    }), /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container movies-container\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"h5\"\n    }, \"Top Movies\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"genres-container\"\n    }, this.state.genres)), /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"movies-container\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"movies-header\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-lg\"\n    }, /*#__PURE__*/React.createElement(\"strong\", null, \"Title\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\"\n    }, /*#__PURE__*/React.createElement(\"strong\", null, \"Rating\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\"\n    }, /*#__PURE__*/React.createElement(\"strong\", null, \"Vote Count\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"results-container\",\n      id: \"results\"\n    }, this.state.movies)))));\n  }\n\n}","map":{"version":3,"sources":["/Users/mirriamronoh/Documents/GitHub/airbnb-explorer/client/src/components/Analytics.js"],"names":["React","PageNavbar","GenreButton","DashboardMovieRow","Analytics","Component","constructor","props","state","genres","movies","showMovies","bind","componentDidMount","fetch","method","then","res","json","genreList","genreDivs","map","genreObj","i","genre","setState","catch","err","console","log","movieList","movieDivs","movie","title","rating","vote_count","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../style/Dashboard.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PageNavbar from './PageNavbar';\nimport GenreButton from './GenreButton';\nimport DashboardMovieRow from './DashboardMovieRow';\n\nexport default class Analytics extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // The state maintained by this React Component. This component maintains the list of genres,\n    // and a list of movies for a specified genre.\n    this.state = {\n      genres: [],\n      movies: []\n    }\n\n    this.showMovies = this.showMovies.bind(this);\n  }\n\n  // React function that is called when the page load.\n  componentDidMount() {\n    // Send an HTTP request to the server.\n    fetch(\"http://localhost:8081/genres\", {\n      method: 'GET' // The type of HTTP request.\n    })\n      .then(res => res.json()) // Convert the response data to a JSON.\n      .then(genreList => {\n        if (!genreList) return;\n        // Map each genreObj in genreList to an HTML element:\n        // A button which triggers the showMovies function for each genre.\n        let genreDivs = genreList.map((genreObj, i) =>\n          <GenreButton key={i} id={\"button-\" + genreObj.genre} onClick={() => this.showMovies(genreObj.genre)} genre={genreObj.genre} />\n        );\n\n        // Set the state of the genres list to the value returned by the HTTP response from the server.\n        this.setState({\n          genres: genreDivs\n        })\n      })\n      .catch(err => console.log(err))\t// Print the error if there is one.\n  }\n\n\n  /* ---- Q1b (Dashboard) ---- */\n  /* Set this.state.movies to a list of <DashboardMovieRow />'s. */\n  showMovies(genre) {\n    console.log(genre);\n    fetch(\"http://localhost:8081/genres/\" + genre, {\n\t\t\tmethod: \"GET\"\n\t\t})\n\t\t\t.then(res => res.json())\n\t\t\t.then(movieList => {\n\t\t\t\tconsole.log(movieList);\n\t\t\t\tlet movieDivs = movieList.map((movie, i) =>\n        <DashboardMovieRow key={i} title={movie.title} rating={movie.rating} votes={movie.vote_count}/>\n        );\n          this.setState({\n            movies: movieDivs\n          });\n        })\n        .catch(err => console.log(err))\n    }\n\n  render() {\n    return (\n      <div className=\"Analytics\">\n\n        <PageNavbar active=\"analytics\" />\n\n        <br></br>\n        <div className=\"container movies-container\">\n          <div className=\"jumbotron\">\n            <div className=\"h5\">Top Movies</div>\n            <div className=\"genres-container\">\n              {this.state.genres}\n            </div>\n          </div>\n\n          <br></br>\n          <div className=\"jumbotron\">\n            <div className=\"movies-container\">\n              <div className=\"movies-header\">\n                <div className=\"header-lg\"><strong>Title</strong></div>\n                <div className=\"header\"><strong>Rating</strong></div>\n                <div className=\"header\"><strong>Vote Count</strong></div>\n              </div>\n              <div className=\"results-container\" id=\"results\">\n                {this.state.movies}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
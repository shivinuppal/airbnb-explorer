{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asmz0\\\\Documents\\\\GitHub\\\\airbnb-explorer\\\\client\\\\src\\\\components\\\\Map.js\";\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus\");\nGeocode.enableDebug();\n\nclass SearchBoxMap extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {};\n\n    this.onPlaceSelected = place => {\n      const address = place.formatted_address,\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng();\n      this.props.handleLatChange(latValue);\n      this.props.handleLongChange(lngValue); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.onMarkerDragEnd = event => {\n      //console.log( 'event', event );\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng();\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address;\n        this.props.handleLatChange(newLat);\n        this.props.handleLongChange(newLng);\n        this.setState({\n          address: address ? address : '',\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      address: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\r\n    * Get the current address from the default map position and set those values in the state\r\n    */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address; //,\n\n      this.setState({\n        address: address ? address : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  /**\r\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n    *\r\n    * @param nextProps\r\n    * @param nextState\r\n    * @return {boolean}\r\n    */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\r\n    * And function for city,state and address input\r\n    * @param event\r\n    */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => /*#__PURE__*/React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      }\n    }, /*#__PURE__*/React.createElement(Autocomplete, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottom: '100px'\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: [],\n      componentRestrictions: {\n        country: \"us\"\n      }\n    }), /*#__PURE__*/React.createElement(Marker, {\n      google: this.props.google,\n      name: 'Dolores park',\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      }\n    }), /*#__PURE__*/React.createElement(Marker, null), /*#__PURE__*/React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0\n      }\n    }, this.state.address))))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus&libraries=places\",\n        loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          }\n        }),\n        containerElement: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          }\n        }),\n        mapElement: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          }\n        })\n      }));\n    } else {\n      map = /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        }\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default SearchBoxMap; //  export default GoogleApiWrapper({\n//\tapiKey: 'AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus'\n//})(MapContainer);","map":{"version":3,"sources":["C:/Users/asmz0/Documents/GitHub/airbnb-explorer/client/src/components/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","enableDebug","SearchBoxMap","Component","constructor","props","onChange","event","setState","target","name","value","onInfoWindowClose","onPlaceSelected","place","address","formatted_address","latValue","geometry","location","lat","lngValue","lng","handleLatChange","handleLongChange","markerPosition","mapPosition","onMarkerDragEnd","newLat","latLng","newLng","fromLatLng","then","response","results","error","console","state","center","componentDidMount","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottom","country","padding","margin","map","undefined"],"mappings":"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","sourcesContent":["\r\n\r\n\r\nimport React from 'react'\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport Geocode from \"react-geocode\";\r\nGeocode.setApiKey(\"AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus\");\r\nGeocode.enableDebug();\r\n\r\n\r\nclass SearchBoxMap extends React.Component{\r\nconstructor( props ){\r\n  super( props );\r\n  this.state = {\r\n   address: '',\r\n\r\n   mapPosition: {\r\n    lat: this.props.center.lat,\r\n    lng: this.props.center.lng\r\n   },\r\n   markerPosition: {\r\n    lat: this.props.center.lat,\r\n    lng: this.props.center.lng\r\n}\r\n  }\r\n }\r\n/**\r\n  * Get the current address from the default map position and set those values in the state\r\n  */\r\n componentDidMount() {\r\n  Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\r\n   response => {\r\n    const address = response.results[0].formatted_address;//,\r\n\r\n\r\n    this.setState( {\r\n     address: ( address ) ? address : '',\r\n    } )\r\n   },\r\n   error => {\r\n    console.error(error);\r\n   }\r\n  );\r\n };\r\n/**\r\n  * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n  *\r\n  * @param nextProps\r\n  * @param nextState\r\n  * @return {boolean}\r\n  */\r\n shouldComponentUpdate( nextProps, nextState ){\r\n  if (\r\n   this.state.markerPosition.lat !== this.props.center.lat ||\r\n   this.state.address !== nextState.address\r\n  ) {\r\n   return true\r\n  } else if ( this.props.center.lat === nextProps.center.lat ){\r\n   return false\r\n  }\r\n }\r\n\r\n/**\r\n  * And function for city,state and address input\r\n  * @param event\r\n  */\r\n onChange = ( event ) => {\r\n  this.setState({ [event.target.name]: event.target.value });\r\n };\r\n/**\r\n  * This Event triggers when the marker window is closed\r\n  *\r\n  * @param event\r\n  */\r\n onInfoWindowClose = ( event ) => {\r\n};\r\n/**\r\n  * When the user types an address in the search box\r\n  * @param place\r\n  */\r\n onPlaceSelected = ( place ) => {\r\nconst address = place.formatted_address,\r\n   latValue = place.geometry.location.lat(),\r\n   lngValue = place.geometry.location.lng();\r\n   this.props.handleLatChange(latValue);\r\n   this.props.handleLongChange(lngValue);\r\n// Set these values in the state.\r\n  this.setState({\r\n    \r\n   address: ( address ) ? address : '',\r\n   markerPosition: {\r\n    lat: latValue,\r\n    lng: lngValue\r\n   },\r\n   mapPosition: {\r\n    lat: latValue,\r\n    lng: lngValue\r\n   },\r\n  })\r\n };\r\n/**\r\n  * When the marker is dragged you get the lat and long using the functions available from event object.\r\n  * Use geocode to get the address, city, area and state from the lat and lng positions.\r\n  * And then set those values in the state.\r\n  *\r\n  * @param event\r\n  */\r\n onMarkerDragEnd = ( event ) => {\r\n  //console.log( 'event', event );\r\n  let newLat = event.latLng.lat(),\r\n   newLng = event.latLng.lng();\r\nGeocode.fromLatLng( newLat , newLng ).then(\r\n   response => {\r\n    const address = response.results[0].formatted_address;\r\n    this.props.handleLatChange(newLat);\r\n    this.props.handleLongChange(newLng);\r\n\r\nthis.setState( {\r\n     address: ( address ) ? address : '',\r\n\r\n     markerPosition: {\r\n      lat: newLat,\r\n      lng: newLng\r\n     },\r\n     mapPosition: {\r\n      lat: newLat,\r\n      lng: newLng\r\n     },\r\n    } )\r\n   },\r\n   error => {\r\n    console.error(error);\r\n   }\r\n  );\r\n };\r\nrender(){\r\nconst AsyncMap = withScriptjs(\r\n   withGoogleMap(\r\n    props => (\r\n     <GoogleMap google={this.props.google}\r\n      defaultZoom={this.props.zoom}\r\n      defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n     >\r\n      {/* For Auto complete Search Box */}\r\n      <Autocomplete\r\n       style={{\r\n        width: '100%',\r\n        height: '40px',\r\n        paddingLeft: '16px',\r\n        marginTop: '2px',\r\n        marginBottom: '100px'\r\n       }}\r\n       onPlaceSelected={ this.onPlaceSelected }\r\n       types={[]}\r\n       componentRestrictions={{country: \"us\"}}\r\n      />\r\n{/*Marker*/}\r\n      <Marker google={this.props.google}\r\n       name={'Dolores park'}\r\n          draggable={true}\r\n          onDragEnd={ this.onMarkerDragEnd }\r\n             position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n      />\r\n      <Marker />\r\n{/* InfoWindow on top of marker */}\r\n      <InfoWindow\r\n       onClose={this.onInfoWindowClose}\r\n       position={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}\r\n      >\r\n       <div>\r\n        <span style={{ padding: 0, margin: 0 }}>{ this.state.address }</span>\r\n       </div>\r\n      </InfoWindow>\r\n</GoogleMap>\r\n)\r\n   )\r\n  );\r\nlet map;\r\n  if( this.props.center.lat !== undefined ) {\r\n   map = <div>\r\n\r\n     <AsyncMap\r\n      googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus&libraries=places\"\r\n      loadingElement={\r\n       <div style={{ height: `100%` }} />\r\n      }\r\n      containerElement={\r\n       <div style={{ height: this.props.height }} />\r\n      }\r\n      mapElement={\r\n       <div style={{ height: `100%` }} />\r\n      }\r\n     />\r\n    </div>\r\n} else {\r\n   map = <div style={{height: this.props.height}} />\r\n  }\r\n  return( map )\r\n }\r\n}\r\nexport default SearchBoxMap\r\n//  export default GoogleApiWrapper({\r\n//\tapiKey: 'AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus'\r\n  //})(MapContainer);\r\n"]},"metadata":{},"sourceType":"module"}
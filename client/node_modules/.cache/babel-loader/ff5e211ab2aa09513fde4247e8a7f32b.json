{"ast":null,"code":"var _jsxFileName = \"/Users/durgasrivatsan/Documents/UPENN/Junior Fall/CIS 550/airbnb-explorer/client/src/components/Map.js\";\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus\");\nGeocode.enableDebug();\n\nclass SearchBoxMap extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {};\n\n    this.onPlaceSelected = place => {\n      const address = place.formatted_address,\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng();\n      this.props.handleLatChange(latValue);\n      this.props.handleLongChange(lngValue); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.onMarkerDragEnd = event => {\n      console.log('event', event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng();\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address;\n        this.props.handleLatChange(newLat);\n        this.props.handleLongChange(newLng);\n        this.setState({\n          address: address ? address : '',\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      address: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n    * Get the current address from the default map position and set those values in the state\n    */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address; //,\n\n      this.setState({\n        address: address ? address : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  /**\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n    *\n    * @param nextProps\n    * @param nextState\n    * @return {boolean}\n    */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n    * And function for city,state and address input\n    * @param event\n    */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => /*#__PURE__*/React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      }\n    }, /*#__PURE__*/React.createElement(Autocomplete, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottom: '100px'\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: [],\n      componentRestrictions: {\n        country: \"us\"\n      }\n    }), /*#__PURE__*/React.createElement(Marker, {\n      google: this.props.google,\n      name: 'Dolores park',\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      }\n    }), /*#__PURE__*/React.createElement(Marker, null), /*#__PURE__*/React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0\n      }\n    }, this.state.address))))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus&libraries=places\",\n        loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          }\n        }),\n        containerElement: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          }\n        }),\n        mapElement: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          }\n        })\n      }));\n    } else {\n      map = /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        }\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default SearchBoxMap; //  export default GoogleApiWrapper({\n//\tapiKey: 'AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus'\n//})(MapContainer);","map":{"version":3,"sources":["/Users/durgasrivatsan/Documents/UPENN/Junior Fall/CIS 550/airbnb-explorer/client/src/components/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","enableDebug","SearchBoxMap","Component","constructor","props","onChange","event","setState","target","name","value","onInfoWindowClose","onPlaceSelected","place","address","formatted_address","latValue","geometry","location","lat","lngValue","lng","handleLatChange","handleLongChange","markerPosition","mapPosition","onMarkerDragEnd","console","log","newLat","latLng","newLng","fromLatLng","then","response","results","error","state","center","componentDidMount","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottom","country","padding","margin","map","undefined"],"mappings":"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","sourcesContent":["\n\n\nimport React from 'react'\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus\");\nGeocode.enableDebug();\n\n\nclass SearchBoxMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: '',\n\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    }\n  }\n  /**\n    * Get the current address from the default map position and set those values in the state\n    */\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(\n      response => {\n        const address = response.results[0].formatted_address;//,\n\n\n        this.setState({\n          address: (address) ? address : '',\n        })\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  };\n  /**\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n    *\n    * @param nextProps\n    * @param nextState\n    * @return {boolean}\n    */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.state.markerPosition.lat !== this.props.center.lat ||\n      this.state.address !== nextState.address\n    ) {\n      return true\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false\n    }\n  }\n\n  /**\n    * And function for city,state and address input\n    * @param event\n    */\n  onChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  /**\n    * This Event triggers when the marker window is closed\n    *\n    * @param event\n    */\n  onInfoWindowClose = (event) => {\n  };\n  /**\n    * When the user types an address in the search box\n    * @param place\n    */\n  onPlaceSelected = (place) => {\n    const address = place.formatted_address,\n      latValue = place.geometry.location.lat(),\n      lngValue = place.geometry.location.lng();\n    this.props.handleLatChange(latValue);\n    this.props.handleLongChange(lngValue);\n    // Set these values in the state.\n    this.setState({\n\n      address: (address) ? address : '',\n      markerPosition: {\n        lat: latValue,\n        lng: lngValue\n      },\n      mapPosition: {\n        lat: latValue,\n        lng: lngValue\n      },\n    })\n  };\n  /**\n    * When the marker is dragged you get the lat and long using the functions available from event object.\n    * Use geocode to get the address, city, area and state from the lat and lng positions.\n    * And then set those values in the state.\n    *\n    * @param event\n    */\n  onMarkerDragEnd = (event) => {\n    console.log('event', event);\n    let newLat = event.latLng.lat(),\n      newLng = event.latLng.lng();\n    Geocode.fromLatLng(newLat, newLng).then(\n      response => {\n        const address = response.results[0].formatted_address;\n        this.props.handleLatChange(newLat);\n        this.props.handleLongChange(newLng);\n\n        this.setState({\n          address: (address) ? address : '',\n\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n        })\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  };\n  render() {\n    const AsyncMap = withScriptjs(\n      withGoogleMap(\n        props => (\n          <GoogleMap google={this.props.google}\n            defaultZoom={this.props.zoom}\n            defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n          >\n            {/* For Auto complete Search Box */}\n            <Autocomplete\n              style={{\n                width: '100%',\n                height: '40px',\n                paddingLeft: '16px',\n                marginTop: '2px',\n                marginBottom: '100px'\n              }}\n              onPlaceSelected={this.onPlaceSelected}\n              types={[]}\n              componentRestrictions={{ country: \"us\" }}\n            />\n            {/*Marker*/}\n            <Marker google={this.props.google}\n              name={'Dolores park'}\n              draggable={true}\n              onDragEnd={this.onMarkerDragEnd}\n              position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n            />\n            <Marker />\n            {/* InfoWindow on top of marker */}\n            <InfoWindow\n              onClose={this.onInfoWindowClose}\n              position={{ lat: (this.state.markerPosition.lat + 0.0018), lng: this.state.markerPosition.lng }}\n            >\n              <div>\n                <span style={{ padding: 0, margin: 0 }}>{this.state.address}</span>\n              </div>\n            </InfoWindow>\n          </GoogleMap>\n        )\n      )\n    );\n    let map;\n    if (this.props.center.lat !== undefined) {\n      map = <div>\n\n        <AsyncMap\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus&libraries=places\"\n          loadingElement={\n            <div style={{ height: `100%` }} />\n          }\n          containerElement={\n            <div style={{ height: this.props.height }} />\n          }\n          mapElement={\n            <div style={{ height: `100%` }} />\n          }\n        />\n      </div>\n    } else {\n      map = <div style={{ height: this.props.height }} />\n    }\n    return (map)\n  }\n}\nexport default SearchBoxMap\n//  export default GoogleApiWrapper({\n//\tapiKey: 'AIzaSyAEQxbsOaMUqLssMg8VydzIrATb6Et0dus'\n  //})(MapContainer);\n"]},"metadata":{},"sourceType":"module"}
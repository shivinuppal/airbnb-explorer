{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asmz0\\\\Documents\\\\GitHub\\\\airbnb-explorer\\\\client\\\\src\\\\components\\\\Host.js\";\nimport React from 'react';\nimport PageNavbar from './PageNavbar';\nimport ListingRow from './ListingRow';\nimport HostRow from './HostRow';\nimport '../style/Zipcode.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nexport default class Host extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hostId: this.props.match.params.hostId,\n      hostInfo: \"\",\n      listings: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  /* ---- Q3a (Best Genres) ---- \r\n  submitHostId() {\r\n  \tfetch(\"http://localhost:8081/getHost\", {\r\n       method: 'GET' // The type of HTTP request.\r\n     })\r\n       .then(res => res.json()) // Convert the response data to a JSON.\r\n       .then(hostList => {\r\n  \n         // Map each attribute of a person in this.state.people to an HTML element\r\n         let hostDivs = hostList.map((host, i) => \r\n  \t[<option key={i} value={host.id}>{host.id}</option>]\r\n  \n         );\r\n         // Set the state of the person list to the value returned by the HTTP response from the server.\r\n         this.setState({\r\n           allHosts: hostDivs,\r\n         })\r\n       \r\n       })\r\n       .catch(err => console.log(err))\r\n     \r\n  } */\n\n\n  handleChange(e) {\n    this.setState({\n      hostId: e.target.value\n    });\n  }\n\n  componentDidMount() {\n    console.log(this.state.hostId);\n    fetch(\"http://localhost:8081/getHost/\" + this.state.hostId, {\n      method: 'GET' // The type of HTTP request.\n\n    }).then(res => res.json()) // Convert the response data to a JSON.\n    .then(hostList => {\n      console.log(hostList); // Map each attribute of a person in this.state.people to an HTML element\n\n      let listingDivs = hostList.map((host, i) => /*#__PURE__*/React.createElement(ListingRow, {\n        key: i,\n        listing_id: host[0],\n        price: host[1],\n        summary: host[2],\n        pic: host[3]\n      }));\n      let hostPicDiv = hostList[0][14];\n      let hostDiv = /*#__PURE__*/React.createElement(HostRow, {\n        id: hostList[0][4],\n        host_about: hostList[0][5],\n        host_response_time: hostList[0][6],\n        host_response_rate: hostList[0][7],\n        host_acceptance_rate: hostList[0][8],\n        host_is_superhost: hostList[0][9],\n        host_neighborhood: hostList[0][10],\n        host_total_listings_count: hostList[0][11],\n        host_identity_verified: hostList[0][12],\n        name: hostList[0][13]\n      });\n      console.log(listingDivs); // Set the state of the person list to the value returned by the HTTP response from the server.\n\n      this.setState({\n        hostInfo: hostDiv,\n        hostPic: hostPicDiv,\n        listings: listingDivs\n      });\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Host\"\n    }, /*#__PURE__*/React.createElement(PageNavbar, {\n      active: \"host\"\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container hosts-container\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hosts-container\"\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"host-pic\",\n      src: this.state.hostPic\n    }), this.state.hostInfo))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"listings-container center\"\n    }, this.state.listings));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/asmz0/Documents/GitHub/airbnb-explorer/client/src/components/Host.js"],"names":["React","PageNavbar","ListingRow","HostRow","Host","Component","constructor","props","state","hostId","match","params","hostInfo","listings","handleChange","bind","e","setState","target","value","componentDidMount","console","log","fetch","method","then","res","json","hostList","listingDivs","map","host","i","hostPicDiv","hostDiv","hostPic","catch","err","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PageNavbar from './PageNavbar';\r\nimport ListingRow from './ListingRow';\r\nimport HostRow from './HostRow';\r\nimport '../style/Zipcode.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nexport default class Host extends React.Component {\r\n\tconstructor(props) { \r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thostId: this.props.match.params.hostId,\r\n\t\t\thostInfo: \"\",\r\n\t\t\tlistings: []\r\n\t\t};\r\n\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t}\r\n\r\n\t/* ---- Q3a (Best Genres) ---- \r\n\tsubmitHostId() {\r\n\t\tfetch(\"http://localhost:8081/getHost\", {\r\n      method: 'GET' // The type of HTTP request.\r\n    })\r\n      .then(res => res.json()) // Convert the response data to a JSON.\r\n      .then(hostList => {\r\n\r\n        // Map each attribute of a person in this.state.people to an HTML element\r\n        let hostDivs = hostList.map((host, i) => \r\n\t\t[<option key={i} value={host.id}>{host.id}</option>]\r\n\r\n        );\r\n        // Set the state of the person list to the value returned by the HTTP response from the server.\r\n        this.setState({\r\n          allHosts: hostDivs,\r\n        })\r\n      \r\n      })\r\n      .catch(err => console.log(err))\r\n    \r\n\t} */\r\n\r\n\thandleChange(e) {\r\n\t\tthis.setState({\r\n\t\t\thostId: e.target.value\r\n\t\t});\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconsole.log(this.state.hostId);\r\n\t\tfetch(\"http://localhost:8081/getHost/\" + this.state.hostId, {\r\n\t  method: 'GET' // The type of HTTP request.\r\n\t})\r\n\t  .then(res => res.json()) // Convert the response data to a JSON.\r\n\t  .then(hostList => {\r\n\t\tconsole.log(hostList);\r\n\t\t// Map each attribute of a person in this.state.people to an HTML element\r\n\t\tlet listingDivs = hostList.map((host, i) => \r\n\t\t  <ListingRow key={i} listing_id={host[0]} price={host[1]} summary={host[2]} pic={host[3]}\r\n\t\t  />\r\n\t\t);\r\n\t\tlet hostPicDiv = hostList[0][14];\r\n\t\tlet hostDiv =\r\n\t\t\t\t\t<HostRow id={hostList[0][4]} host_about={hostList[0][5]}\r\n\t\t\t\t\t\thost_response_time={hostList[0][6]} host_response_rate={hostList[0][7]}\r\n\t\t\t\t\t\thost_acceptance_rate={hostList[0][8]} host_is_superhost={hostList[0][9]}\r\n\t\t\t\t\t\thost_neighborhood={hostList[0][10]} host_total_listings_count={hostList[0][11]}\r\n\t\t\t\t\t\thost_identity_verified={hostList[0][12]} name={hostList[0][13]}\r\n\t\t\t\t\t/> \r\n\t\tconsole.log(listingDivs);\r\n\t\t// Set the state of the person list to the value returned by the HTTP response from the server.\r\n\t\tthis.setState({\r\n\t\t\thostInfo: hostDiv, \r\n\t\t\thostPic: hostPicDiv, \r\n\t\t\tlistings: listingDivs\r\n\t\t})\r\n\t  })\r\n\t  .catch(err => console.log(err))\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"Host\">\r\n\t\t\t\t<PageNavbar active=\"host\" />\r\n\r\n\t\t\t\t<div className=\"container hosts-container\">\r\n\t\t\t      <div className=\"jumbotron\">\r\n\t\t\t        <div className=\"hosts-container\">\r\n\t\t\t\t\t<img className=\"host-pic\" src={this.state.hostPic}></img>\r\n\t\t\t\t\t\t{this.state.hostInfo}\r\n\t\t\t        </div>\r\n\t\t\t      </div>\r\n\t\t\t\t  \r\n\t\t\t    </div>\r\n\t\t\t\t<div className=\"listings-container center\">\r\n\t\t\t\t  {this.state.listings}\r\n\t\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}